-- Cоздаем таблицу Группа
create table sgroup (
id integer not null,
group_name varchar(40),
primary key (id));

-- Cоздаем таблицу Студент
create table student (
id integer not null,
id_group integer not null, -- поле для связи с таблицей Группа
student_name varchar(40),
last_name varchar(40),
middle_name varchar(40),
sex char(1),
age smallint,
primary key (id), -- уникальный ключ id
foreign key (id_group) references sgroup (id)); -- определение связи с таб-лицей Группа

-- Cоздаем таблицу Хобби
create table hobby (
id integer not null, -- уникальный ключ
hobby_name varchar(100),
primary key (id)); -- уникальный ключ id

-- Cоздаем таблицу Студент-Хобби
create table student_hobby (
id_student integer not null, -- поле для связи с таблицей Студент
id_hobby integer not null, -- поле для связи с таблицей Хобби
primary key (id_student, id_hobby), -- уникальный ключ составной id_student, id_hobby
foreign key (id_hobby) references hobby (id), -- определение связи с табли-цей Хобби
foreign key (id_student) references student (id)); -- определение связи с таблицей Студент

-- Добавляем записи в таблицу Группа
insert into sgroup (id, group_name) values (1, 'БВТ2354');
insert into sgroup values (2, 'БВТ2355');
insert into sgroup values (3, 'БВТ2356');

-- Добавляем записи в таблицу Студент
insert into student (id, id_group, last_name, student_name, middle_name, sex, age)
values (1, 1, 'Барышников', 'Илья', 'Владимирович', 'м', 24);
insert into student (id, id_group, last_name, student_name, middle_name, sex, age)
values (2, 2, 'Романов', 'Олег', 'Дмитриевич', 'м', 22);
insert into student (id, id_group, last_name, student_name, middle_name, sex, age)
values (3, 1, 'Валентинова', 'Лариса', 'Дмитриевна', 'ж', 31);
insert into student (id, id_group, last_name, student_name, middle_name, sex, age)
values (4, 3, 'Мануйлова', 'Рита', 'Владимировна', 'ж', 18);

-- Добавляем записи в таблицу Хобби
insert into hobby values (1, 'Активный отдых');
insert into hobby values (2, 'Боулинг');
insert into hobby values (3, 'Водное поло');
insert into hobby values (4, 'Вышивание');
insert into hobby values (5, 'Ролики');
insert into hobby values (6, 'Пилатес');

-- Добавляем записи в таблицу Студент-Хобби
-- Для студента Барышникова
insert into student_hobby values (1, 1);
insert into student_hobby values (1, 3);
-- Для студента Романова
insert into student_hobby values (2, 1);
insert into student_hobby values (2, 4);
-- Для студентки Валентиновой
insert into student_hobby values (3, 1);
insert into student_hobby values (3, 5);
insert into student_hobby values (3, 6);

select s.last_name, s.student_name, s.middle_name
from student s
order by s.age desc limit 1;

select s.last_name, s.student_name, s.middle_name
from student s
where s.age = (select max(s.age) from student s);

select s.last_name, s.student_name, s.middle_name
from student s, sgroup sg
where sg.id = s.id_group and sg.group_name = 'БВТ2354';

select g.group_name, count(s.id)
from sgroup g, student s
where g.id=s.id_group
group by 1;

-- Пусть список: фамилия студента и его хобби. В случае отсутствия у студента хобби он тоже должен присутствовать в списке с пустым значением для хобби:
select s.last_name, h.hobby_name
from student s
left join student_hobby sh on s.id=sh.id_student
left join hobby h on sh.id_hobby=h.id;

create or replace function maxageplpgsql (in_group varchar(40))
returns smallint
language plpgsql
as
$$
declare
  maxage smallint; -- объявляем локальную переменную
begin
  select max(s.age)
  into maxage -- сохраняем результат в переменную
  from student s, sgroup g
  where s.id_group=g.id and g.group_name=in_group;
  return maxage; -- возвращаем значение функции
end;
$$;

select s.last_name, s.student_name, s.middle_name, s.age
from student s
where s.age > maxageplpgsql('БВТ2355');

create table accounts  -- создаем таблицу
(id int generated by default as identity, -- генерируется по умолчанию как идентификатор
name varchar(20) not null,
balance dec(15,2) not null,
primary key(id));

-- Добавляем записи с балансом клиентов
insert into accounts(name, balance) values('Валентинова Л.Д.', 10000); 
insert into accounts(name, balance) values('Барышников И.В.', 10000);

create or replace procedure transfer -- создаем процедуру перевода
(
in sender int, -- явное указание типа параметра
receiver int, 
amount dec
)
language plpgsql as
$$
begin
update accounts 
set balance = balance - amount -- вычитание суммы со счета отправителя
where id = sender;

update accounts 
set balance = balance + amount -- добавление суммы на счет получателя
where id = receiver;
commit; -- подтверждение транзакции
end;
$$;

select *
from accounts;

call transfer(1,2,5000);

select *
from accounts;

-- Выводим всех студентов с хобби
select s.id, s.last_name, count(sh.id_hobby)
from student s, student_hobby sh, hobby h
where s.id=sh.id_student and sh.id_hobby=h.id
group by 1, 2
having count(sh.id_hobby)>1
order by 1;

-- Создаем триггерную функцию
create function ftrig_student_before_del() returns trigger as ' 
begin
if (select count(*) from student_hobby sh where sh.id_student=old.id) > 0
  then delete from student_hobby sh where sh.id_student=old.id; 
end if;
return old;
end; 
' language plpgsql;

-- Создаем триггер
create trigger trig_student_befor_del
before delete on student for each row
execute procedure ftrig_student_before_del(); 

-- Удаляем студента с хобби
delete
from student s
where s.id = 2;

-- Выводим всех студентов с хобби
select s.id, s.last_name, count(sh.id_hobby)
from student s, student_hobby sh, hobby h
where s.id=sh.id_student and sh.id_hobby=h.id
group by 1, 2
having count(sh.id_hobby)>1
order by 1;

-- Cоздаем таблицу Группа
create table sgroup (
id integer not null,
group_name varchar(40),
primary key (id));

-- Cоздаем таблицу Студент
create table student (
id integer not null,
id_group integer not null, -- поле для связи с таблицей Группа
student_name varchar(40),
last_name varchar(40),
middle_name varchar(40),
sex char(1),
birthday date not null, -- используем дату рождения
primary key (id), -- уникальный ключ id
foreign key (id_group) references sgroup (id)); -- определение связи с таб-лицей Группа

-- Добавляем записи в таблицу Группа
insert into sgroup (id, group_name) values (1, 'БВТ2354');
insert into sgroup values (2, 'БВТ2355');
insert into sgroup values (3, 'БВТ2356');

-- Добавляем записи в таблицу Студент
insert into student (id, id_group, last_name, student_name, middle_name, sex, birthday)
values (1, 1, 'Барышников', 'Илья', 'Владимирович', 'м', '05.02.1999');
insert into student (id, id_group, last_name, student_name, middle_name, sex, birthday)
values (2, 2, 'Романов', 'Олег', 'Дмитриевич', 'м', '03.11.2001');
insert into student (id, id_group, last_name, student_name, middle_name, sex, birthday)
values (3, 1, 'Валентинова', 'Лариса', 'Дмитриевна', 'ж', '05.08.2004');
insert into student (id, id_group, last_name, student_name, middle_name, sex, birthday)
values (4, 3, 'Мануйлова', 'Рита', 'Владимировна', 'ж', '05.10.1998');

-- Создаем представление
create or replace view student_age 
as
select id, id_group, student_name, last_name, middle_name, sex,
